using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Runtime.InteropServices;

public class CPUData : MonoBehaviour
{
    // This block expose mesh and material for the user
    public Mesh instanceMesh;
    public Material instanceMaterial;

    // Set the compute shader to generate
    public ComputeShader computeShader;

    // Set the ComputeBuffer for our system.
    private ComputeBuffer matrixBuffer;

    // Properties to be generated and use by the C# script
    private Matrix4x4[] matrices;
    private int instanceCount = 10000;

    void Start()
    {
        // Init with a default Identity Matrix
        matrices = new Matrix4x4[instanceCount];
        for (int i = 0; i < instanceCount; i++)
        {
            matrices[i] = Matrix4x4.identity;
        }
        // Init the ComputeBuffer with the instance count, in this case 10000 with size of the stride in memory
        matrixBuffer = new ComputeBuffer(instanceCount, Marshal.SizeOf(typeof(Matrix4x4)));
    }

    void Update()
    {
        // Set data to matrixBuffer
        matrixBuffer.SetData(matrices);

        // Find the Kernel to use on the GPU
        int kernel = computeShader.FindKernel("CSMain");

        // Set the buffer to the computeShader
        computeShader.SetBuffer(kernel, "matrixBuffer", matrixBuffer);

        // Dispatch it with thread group settings
        computeShader.Dispatch(kernel, instanceCount / 8, instanceCount / 8, 1);

        // set other variables in the compute shader 
        computeShader.SetFloat("_Time", Time.time);

        // TODO: Add Texture

        // Retrieve the data back onto the CPU from the GPU
        matrixBuffer.GetData(matrices);


        /* RENDERING */
        // This part handles the rendering of the data generated by the GPU

        int batchSize = 1023; // Max limit for a single drawcall
        for (int i = 0; i < instanceCount; i += batchSize)
        {
            // Get the count based on max Batch size and  current instance count
            int count = Mathf.Min(batchSize, instanceCount - i);
            // Batch those into a new array we declare
            Matrix4x4[] batch = new Matrix4x4[count];
            // Use Array.
            System.Array.Copy(matrices, i, batch, 0, count);
            // Call the Graphics API to render the mesh and material with the current  batch
            Graphics.DrawMeshInstanced(instanceMesh, 0, instanceMaterial, batch);
        }
    }

    void OnDestroy()
    {
        matrixBuffer.Release();
    }
}
